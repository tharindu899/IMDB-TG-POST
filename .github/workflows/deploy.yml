# .github/workflows/deploy.yml
name: Deploy Worker & Frontend to Cloudflare ☁️🚀

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-worker:
    name: 🚀 Deploy Cloudflare Worker
    runs-on: ubuntu-latest
    outputs:
      worker-url: ${{ steps.deploy_worker.outputs.url }}
      auth-token: ${{ steps.gen_token.outputs.token }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔑 Generate AUTH_TOKEN
        id: gen_token
        run: |
          # generate 32 random bytes → 64 hex chars
          TOKEN=$(openssl rand -hex 32)
          echo "Generated token: $TOKEN"
          # use environment file instead of deprecated set-output
          echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

      - name: 📥 Install Wrangler CLI
        run: npm install -g wrangler@4

      - name: 📝 Generate wrangler.toml with account_id
        working-directory: worker
        run: |
          sed "s/__ACCOUNT_ID__/${{ secrets.CF_ACCOUNT_ID }}/g" wrangler.template.toml > wrangler.toml

      - name: 🔐 Set secrets and deploy worker
        working-directory: worker
        id: deploy_worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          TELEGRAM_BOT_TOKEN:   ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TMDB_API_KEY:         ${{ secrets.TMDB_API_KEY }}
          AUTH_TOKEN:           ${{ steps.gen_token.outputs.token }}
        run: |
          # Push secrets into Worker
          echo "${TELEGRAM_BOT_TOKEN}" | wrangler secret put TELEGRAM_BOT_TOKEN
          echo "${TMDB_API_KEY}"       | wrangler secret put TMDB_API_KEY
          echo "${AUTH_TOKEN}"         | wrangler secret put AUTH_TOKEN

          # Deploy worker and capture output
          DEPLOY_OUTPUT=$(wrangler deploy)
          echo "$DEPLOY_OUTPUT"

          # Extract Worker URL
          WORKER_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[^ ]*\.workers\.dev' | head -n1)
          # use environment file instead of deprecated set-output
          echo "url=$WORKER_URL" >> "$GITHUB_OUTPUT"

  deploy-frontend:
    name: 🌐 Deploy Frontend to Cloudflare Pages
    needs: deploy-worker
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📝 Inject Worker URL
        run: |
          sed -i "s|__WORKER_URL__|${{ needs.deploy-worker.outputs.worker-url }}|g" public/script.js

      - name: 📝 Inject Auth Token
        run: |
          sed -i "s|__AUTH_TOKEN__|${{ needs.deploy-worker.outputs.auth-token }}|g" public/script.js

      - name: 🔍 Check if Pages project exists
        id: check_pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          PROJECT_NAME: imdb-tg-post-font
        run: |
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json")
          EXISTS=$(echo "$RESPONSE" | jq -r --arg NAME "$PROJECT_NAME" '.result[] | select(.name == $NAME) | .name')
          echo "exists=$EXISTS" >> "$GITHUB_OUTPUT"

      - name: 🚧 Create Pages project if not exists
        if: steps.check_pages.outputs.exists == 'false'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          PROJECT_NAME: imdb-tg-post-font
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json" \
            --data '{
              "name": "'"${PROJECT_NAME}"'",
              "production_branch": "main",
              "build_config": {
                "build_command": "",
                "destination_dir": "public"
              }
            }'
          sleep 30

      - name: 🔧 Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@1
        with:
          apiToken:  ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: imdb-tg-post-font
          directory: ./public
          branch: main